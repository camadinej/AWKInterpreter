package parser;

import lexer.Token;
import java.util.LinkedList;
import java.util.Optional;

/**
 * This class manages type checking and position in a list of tokens
 * generated by a lexer
 *
 * @author Jake Camadine
 */
public class TokenHandler {
    private LinkedList<Token> tokens;

    public TokenHandler(LinkedList<Token> tokens) {
        this.tokens = new LinkedList<>(tokens);
    }

    /**
     * this method looks j tokens past the head of a list of tokens
     * @param j the number of tokens past the head to look
     * @return the token j tokens ahead of the first element in the list
     */
    public Optional<Token> peek(int j) {
        if(j < tokens.size()) {
            return Optional.of(tokens.get(j));
        }
        return Optional.empty();
    }

    /**
     * @return true if tokens is not empty
     */
    public boolean moreTokens() {
        if(!tokens.isEmpty()) {
            return true;
        }
        return false;
    }

    /**
     * checks the head of the list for matching type. Pops the head and returns
     * it if the types match.
     *
     * @param t a token type
     * @return the head of the list of tokens if it is the same type as the TokenType t
     */
    public Optional<Token> matchAndRemove(Token.TokenType t) {
        if (moreTokens()) {
            if (tokens.peek().getType() == t) {
                return Optional.of(tokens.pop());
            }
        }
        return Optional.empty();
    }

}
